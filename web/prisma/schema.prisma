generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  url           String?
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  gifs          Gif[]
  sessions      Session[]
  videos        Video[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id           String      @id @default(cuid())
  title        String
  description  String?
  url          String      // Store the Cloudinary URL here
  thumbnail    String?     // You can also store a Cloudinary thumbnail URL here
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  fileSize     Int
  filename     String
  mimeType     String
  originalName String
  status       String      @default("processing")
  gifs         Gif[]
  transcript   Transcript?
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Gif {
  id          String   @id @default(cuid())
  startTime   Float
  endTime     Float
  title       String
  description String?
  prompt      String?
  caption     String?
  videoId     String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Transcript {
  id        String   @id @default(cuid())
  videoId   String   @unique
  words     Json
  fullText  String
  createdAt DateTime @default(now())
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}
